<%- layout("layouts/allpg.ejs") %>

    <link href='https://api.mapbox.com/mapbox-gl-js/v2.8.1/mapbox-gl.css' rel='stylesheet' />
    <style>
        .mapboxgl-popup {
            max-width: 400px;
            font: 12px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif;
        }
    </style>
    <div class="alert alert-success d-none nodata" role="alert">
        <h4 class="alert-heading">No Data!</h4>
        <hr>
        <p>Aww yeah, bus - <%= id %> has no data available at the current time, check again later.</p>
        <form action="/">
            <div class="text-center">
                <button class="btn btn-outline-info" style="padding: 5px 30px;border-radius: 10px;">OK</button>
            </div>
        </form>
    </div>

    <div class="alert alert-success d-none offline" role="alert">
        <h4 class="alert-heading">Network Error!!</h4>
        <hr>
        <p>Oops...check your network connectivity and try again.</p>
    </div>

    <!-- Direction -->

    <!-- <script
        src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v4.1.1/mapbox-gl-directions.js"></script>
    <link rel="stylesheet"
        href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-directions/v4.1.1/mapbox-gl-directions.css"
        type="text/css"> -->


    <div id='map' style='width: 100%; height: 600px; margin-top: 75px; margin-bottom: 75px;'></div>
    <script type="module">
        let url = ("<%-process.env.firebaseurl%>")
        import { initializeApp } from "https://www.gstatic.com/firebasejs/9.4.0/firebase-app.js";
        import { getDatabase, onValue, ref, get } from "https://www.gstatic.com/firebasejs/9.4.0/firebase-database.js";
        let id = parseInt("<%-id%>")
        const firebaseConfig = { databaseURL: url || "https://locationtracker-62c3f-default-rtdb.firebaseio.com/", };
        const app2 = initializeApp(firebaseConfig);
        const database = getDatabase(app2);
        let lati, longi, map, marker, address;
        const db = getDatabase();
        let once = true;
        window.addEventListener("offline", (event) => {
            document.querySelector(".offline").classList.remove("d-none")
        });
        window.addEventListener("online", (event) => {
            document.querySelector(".offline").classList.add("d-none")
        });
        onValue(ref(db, "users/"), function getdata(snapshot) {
            //console.log("...............onvalue.............")
            let datas = snapshot.val();
            //console.log(datas)
            if (!datas[id]) {
                document.querySelector(".alert").classList.remove("d-none")
            } else {
                lati = datas[id].lat
                longi = datas[id].lon
                address = datas[id].address
                // console.log(longi, lati)
                // console.log()
                // console.log("changed22")
                // console.log("............................")
                show(lati, longi)
            }
        });
        function show(lati, longi, address) {
            if (once) {
                mapboxgl.accessToken = 'pk.eyJ1Ijoia2FydGhpa2V5YW5iYWxhamkiLCJhIjoiY2t2dGd3YmVnM2NrajJudGt1eHdscWVqMyJ9.A0jCxbqQ2SvjO8TVEz2Hxg';
                map = new mapboxgl.Map({
                    container: 'map', // container ID
                    style: 'mapbox://styles/mapbox/streets-v12', // style URL  
                    center: [longi, lati], // starting position [lng, lat]
                    pitch: 0, // pitch in degrees
                    bearing: -80,
                    zoom: 13.5, // starting zoom
                });
                // console.log(longi, lati)

                // var el = document.createElement('div');
                // el.className = 'marker';
                // el.style.backgroundImage = 'url(https://raw.githubusercontent.com/phatblat/BlueDot/0.1.1/bluedot.gif)';
                // el.style.width = '20px';
                // el.style.height = '20px';

                marker = new mapboxgl.Marker()
                    .setLngLat([longi, lati])
                    .addTo(map)
                map.addControl(new mapboxgl.FullscreenControl());
                map.addControl(new mapboxgl.NavigationControl());
                // map.addControl(
                //     new MapboxDirections({
                //         accessToken: mapboxgl.accessToken
                //     }),
                //     'top-left'
                // );
                map.on('load', function () {
                    map.flyTo({
                        zoom: 16.5,
                        pitch: 50,
                        bearing: 0,
                        duration: 3000
                    });
                });
                once = false
            }
            mark(lati, longi, map, address)
        }
        function mark(lati, longi, map) {
            marker.remove();
            // console.log(longi, lati)
            const popup = new mapboxgl.Popup({
                focusAfterOpen: false
            });

            marker = new mapboxgl.Marker()
                .setLngLat([longi, lati])
                .addTo(map)
                .setPopup(popup.setText(`${address}`))

            map.flyTo({
                center: [longi, lati],
                duration: 1000,
                essential: true
            });
        }

    </script>
    <div class="dummy"></div>